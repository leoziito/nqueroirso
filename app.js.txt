import React, { useState, useEffect, createContext, useContext, useRef } from 'react';
import { initializeApp } from 'firebase/app';
import {
  getAuth,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signOut,
  onAuthStateChanged,
  updatePassword,
  reauthenticateWithCredential,
  EmailAuthProvider,
  deleteUser
} from 'firebase/auth';
import {
  getFirestore,
  doc,
  getDoc,
  setDoc,
  updateDoc,
  onSnapshot,
  collection,
  query,
  where,
  addDoc,
  getDocs,
  serverTimestamp,
  deleteDoc,
  orderBy
} from 'firebase/firestore';

// Suas configurações do Firebase
const firebaseConfig = {
  apiKey: "AIzaSyAkYtTPiSWopuyG1WyOgLniCYtUvDjezNo",
  authDomain: "naoqueroirso.firebaseapp.com",
  projectId: "naoqueroirso",
  storageBucket: "naoqueroirso.firebasestorage.app",
  messagingSenderId: "936060989706",
  appId: "1:936060989706:web:8391e45215abd21f750af3"
};

const IMGBB_API_KEY = "9a792281a6220ed358215ad0c1e4162e";

const MOCK_LOCATIONS = [
  "Rio de Janeiro, RJ", "Duque de Caxias, RJ", "Saracuruna, RJ", "Niterói, RJ",
  "São Gonçalo, RJ", "Nova Iguaçu, RJ", "Cabo Frio, RJ", "Búzios, RJ",
  "Angra dos Reis, RJ", "Paraty, RJ", "Petrópolis, RJ", "Teresópolis, RJ",
  "Volta Redonda, RJ", "Macaé, RJ", "Campos dos Goytacazes, RJ", "Resende, RJ",
  "Barra Mansa, RJ", "Itaboraí, RJ", "Queimados, RJ", "São João de Meriti, RJ",
  "Nilópolis, RJ", "Belford Roxo, RJ", "Magé, RJ", "Guapimirim, RJ",
  "Itaguaí, RJ", "Mangaratiba, RJ", "Araruama, RJ", "Saquarema, RJ",
  "Maricá, RJ", "Rio das Ostras, RJ", "Casimiro de Abreu, RJ", "Cachoeiras de Macacu, RJ",
  "Tanguá, RJ", "Seropédica, RJ", "Japeri, RJ", "Mesquita, RJ",
  "Engenheiro Pedreira, RJ", "Miguel Pereira, RJ", "Vassouras, RJ", "Valença, RJ",
  "Barra do Piraí, RJ", "Piraí, RJ", "Três Rios, RJ", "Paraíba do Sul, RJ",
  "Areal, RJ", "Sapucaia, RJ", "Sumidouro, RJ", "Cantagalo, RJ",
  "Cordeiro, RJ", "Nova Friburgo, RJ", "Bom Jardim, RJ", "Duas Barras, RJ",
  "Carmo, RJ", "São Sebastião do Alto, RJ", "Santa Maria Madalena, RJ",
  "Conceição de Macabu, RJ", "Carapebus, RJ", "Quissamã, RJ", "Cardoso Moreira, RJ",
  "São Fidélis, RJ", "São Francisco de Itabapoana, RJ", "Italva, RJ",
  "Cambuci, RJ", "Miracema, RJ", "Laje do Muriaé, RJ", "Natividade, RJ",
  "Porciúncula, RJ", "Varre-Sai, RJ", "Bom Jesus do Itabapoana, RJ", "Itaperuna, RJ",
  "São José de Ubá, RJ", "Aperibé, RJ", "Santo Antônio de Pádua, RJ",
  "Itaocara, RJ", "São João da Barra, RJ", "Quatis, RJ", "Porto Real, RJ",
  "São Paulo, SP", "Campinas, SP", "Guarulhos, SP", "Osasco, SP",
  "Santo André, SP", "São Bernardo do Campo, SP", "São Caetano do Sul, SP",
  "Sorocaba, SP", "Ribeirão Preto, SP", "Santos, SP", "Jundiaí, SP",
  "São José dos Campos, SP", "Piracicaba, SP", "Bauru, SP", "São Carlos, SP",
  "Araraquara, SP", "Presidente Prudente, SP", "Marília, SP", "Franca, SP",
  "Taubaté, SP", "São Vicente, SP", "Praia Grande, SP", "Cubatão, SP",
  "Guarujá, SP", "Mogi das Cruzes, SP", "Suzano, SP", "Diadema, SP",
  "Carapicuíba, SP", "Barueri, SP", "Cotia, SP", "Itaquaquecetuba, SP",
  "Taboão da Serra, SP", "Embu das Artes, SP", "Ferraz de Vasconcelos, SP",
  "Mauá, SP", "Poá, SP", "Santa Bárbara d'Oeste, SP", "Americana, SP",
  "Limeira, SP", "Rio Claro, SP", "Indaiatuba, SP", "Sumaré, SP",
  "Hortolândia, SP", "Jacareí, SP", "Pindamonhangaba, SP", "Lorena, SP",
  "Ubatuba, SP", "Ilhabela, SP", "Campos do Jordão, SP", "Atibaia, SP",
  "Bragança Paulista, SP", "Itu, SP", "Salto, SP", "Votorantim, SP",
  "Araçatuba, SP", "São José do Rio Preto, SP", "Catanduva, SP",
  "Barretos, SP", "Jaboticabal, SP", "Sertãozinho, SP", "Batatais, SP",
  "Bebedouro, SP", "Jales, SP", "Votuporanga, SP", "Assis, SP",
  "Ourinhos, SP", "Botucatu, SP", "Jaú, SP", "Lins, SP",
  "Birigui, SP", "Penápolis, SP", "Dracena, SP", "Adamantina, SP",
  "Tupã, SP", "Presidente Venceslau, SP", "Andradina, SP", "Itanhaém, SP",
  "Peruíbe, SP", "Mongaguá, SP", "São Roque, SP", "Itapetininga, SP",
  "Tatuí, SP", "Cerquilho, SP", "Boituva, SP", "Capivari, SP",
  "Pirassununga, SP", "Leme, SP", "Porto Ferreira, SP", "Mococa, SP",
  "São João da Boa Vista, SP", "Espírito Santo do Pinhal, SP",
  "Amparo, SP", "Pedreira, SP", "Serra Negra, SP", "Águas de Lindoia, SP",
  "Belo Horizonte, MG", "Uberlândia, MG", "Contagem, MG", "Juiz de Fora, MG",
  "Betim, MG", "Montes Claros, MG", "Uberaba, MG", "Governador Valadares, MG",
  "Ipatinga, MG", "Sete Lagoas, MG", "Divinópolis, MG", "Santa Luzia, MG",
  "Ibirité, MG", "Poços de Caldas, MG", "Patos de Minas, MG", "Teófilo Otoni, MG",
  "Pouso Alegre, MG", "Barbacena, MG", "Sabará, MG", "Varginha, MG",
  "Conselheiro Lafaiete, MG", "Passos, MG", "Mariana, MG", "Ouro Preto, MG",
  "Diamantina, MG", "Tiradentes, MG", "São João del Rei, MG", "Viçosa, MG",
  "Lavras, MG", "Itajubá, MG", "Alfenas, MG", "Manhuaçu, MG",
  "Unaí, MG", "Paracatu, MG", "Curvelo, MG", "João Monlevade, MG",
  "Timóteo, MG", "Coronel Fabriciano, MG", "Itabira, MG", "Cataguases, MG",
  "Leopoldina, MG", "Muriaé, MG", "Ubá, MG", "Formiga, MG",
  "Araxá, MG", "Frutal, MG", "Ituiutaba, MG", "Januária, MG",
  "Pirapora, MG", "Três Corações, MG", "Campo Belo, MG", "Nepomuceno, MG",
  "Guaxupé, MG", "São Sebastião do Paraíso, MG", "Capelinha, MG",
  "Janaúba, MG", "Salinas, MG", "Taiobeiras, MG", "Porteirinha, MG",
  "Araguari, MG", "Patrocínio, MG", "Monte Carmelo, MG", "Coromandel, MG",
  "Sacramento, MG", "Conceição das Alagoas, MG", "Prata, MG",
  "Iturama, MG", "Campina Verde, MG", "Santa Vitória, MG", "Capinópolis, MG",
  "Canápolis, MG", "Centralina, MG", "Araporã, MG", "Indianópolis, MG",
  "Estrela do Sul, MG", "Grupiara, MG", "Cascalho Rico, MG", "Romaria, MG",
  "Douradoquara, MG", "Abadia dos Dourados, MG", "Coromandel, MG",
  "Vazante, MG", "Lagamar, MG", "Lagoa Grande, MG", "Presidente Olegário, MG",
  "São Gonçalo do Abaeté, MG", "Varjão de Minas, MG", "João Pinheiro, MG",
  "Brasilândia de Minas, MG", "Buritizeiro, MG", "Pirapora, MG",
  "São Romão, MG", "Januária, MG", "Pedras de Maria da Cruz, MG",
  "Montalvânia, MG", "Manga, MG", "Matias Cardoso, MG", "Jaíba, MG",
  "Verdelândia, MG", "Monte Azul, MG", "Gameleiras, MG", "Catuti, MG",
  "Pai Pedro, MG", "Varzelândia, MG", "São João da Ponte, MG",
  "Lontra, MG", "Miravânia, MG", "Ubaí, MG", "Fruta de Leite, MG",
  "Indaiabira, MG", "Ninheira, MG", "Novorizonte, MG", "Rio Pardo de Minas, MG",
  "São Francisco, MG", "Taiobeiras, MG", "Berizal, MG", "Curral de Dentro, MG",
  "Divisa Alegre, MG", "Divisópolis, MG", "Felício dos Santos, MG",
  "Francisco Badaró, MG", "Jenipapo de Minas, MG", "Padre Carvalho, MG",
  "Ponto Chique, MG", "Rubelita, MG", "Salinas, MG", "Santa Cruz de Salinas, MG",
  "Santo Antônio do Retiro, MG", "São João do Paraíso, MG", "São Pedro do Suaçuí, MG",
  "Serra Nova, MG", "Vargem Grande do Rio Pardo, MG", "Verdelândia, MG",
  "Almenara, MG", "Itamarandiba, MG", "Capelinha, MG", "Malacacheta, MG",
  "Água Boa, MG", "Carbonita, MG", "Comercinho, MG", "Couto de Magalhães de Minas, MG",
  "Crisólita, MG", "Divinolândia de Minas, MG", "Felício dos Santos, MG",
  "Franciscópolis, MG", "Frei Gaspar, MG", "Itabirinha, MG", "Jacinto, MG",
  "Jequitinhonha, MG", "Joaíma, MG", "Machacalis, MG", "Medina, MG",
  "Monte Formoso, MG", "Nacip Raydan, MG", "Nova Módica, MG",
  "Novo Cruzeiro, MG", "Ouro Verde de Minas, MG", "Padre Paraíso, MG",
  "Palmópolis, MG", "Poté, MG", "São José do Divino, MG",
  "São José do Jacuri, MG", "São Pedro do Suaçuí, MG", "Setubinha, MG",
  "Teófilo Otoni, MG", "Umburatiba, MG", "Virgem da Lapa, MG",
  "Água Comprida, MG", "Campina Verde, MG", "Carneirinho, MG",
  "Comendador Gomes, MG", "Conceição das Alagoas, MG", "Delta, MG",
  "Fronteira, MG", "Goiabeira, MG", "Itapagipe, MG", "Iturama, MG",
  "Limeira do Oeste, MG", "Nova Ponte, MG", "Perdizes, MG", "Planura, MG",
  "Prata, MG", "São Francisco de Sales, MG", "União de Minas, MG",
  "Veríssimo, MG", "Água Boa, MG", "Carbonita, MG", "Comercinho, MG",
  "Couto de Magalhães de Minas, MG", "Crisólita, MG", "Divinolândia de Minas, MG",
  "Felício dos Santos, MG", "Franciscópolis, MG", "Frei Gaspar, MG",
  "Itabirinha, MG", "Jacinto, MG", "Jequitinhonha, MG", "Joaíma, MG",
  "Machacalis, MG", "Medina, MG", "Monte Formoso, MG", "Nacip Raydan, MG",
  "Nova Módica, MG", "Novo Cruzeiro, MG", "Ouro Verde de Minas, MG",
  "Padre Paraíso, MG", "Palmópolis, MG", "Poté, MG", "São José do Divino, MG",
  "São José do Jacuri, MG", "São Pedro do Suaçuí, MG", "Setubinha, MG",
  "Teófilo Otoni, MG", "Umburatiba, MG", "Virgem da Lapa, MG",
  "Salvador, BA", "Feira de Santana, BA", "Vitória da Conquista, BA",
  "Brasília, DF",
  "Curitiba, PR", "Londrina, PR", "Maringá, PR", "Foz do Iguaçu, PR",
  "Porto Alegre, RS", "Caxias do Sul, RS", "Pelotas, RS",
  "Fortaleza, CE", "Caucaia, CE", "Juazeiro do Norte, CE",
  "Recife, PE", "Jaboatão dos Guararapes, PE", "Olinda, PE",
  "Manaus, AM",
  "Belém, PA", "Ananindeua, PA",
  "Vitória, ES", "Vila Velha, ES", "Serra, ES",
  "Florianópolis, SC", "Joinville, SC", "Blumenau, SC",
  "Goiânia, GO", "Aparecida de Goiânia, GO",
  "Campo Grande, MS",
  "João Pessoa, PB",
  "Natal, RN",
  "Maceió, AL",
  "Aracaju, SE",
  "Teresina, PI",
  "São Luís, MA", "Imperatriz, MA",
  "Parnaíba, PI",
  "Mossoró, RN",
  "Campina Grande, PB",
  "Arapiraca, AL",
  "Nossa Senhora do Socorro, SE",
  "Araguaína, TO",
  "Ji-Paraná, RO",
  "Boa Vista, RR",
  "Santana, AP",
  "Cuiabá, MT", "Várzea Grande, MT"
].sort();

const FirebaseContext = createContext(null);

const FirebaseProvider = ({ children }) => {
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);
  const [userId, setUserId] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [projectId, setProjectId] = useState(null);

  useEffect(() => {
    const initializeFirebase = async () => {
      try {
        const app = initializeApp(firebaseConfig);
        const firestoreDb = getFirestore(app);
        const firebaseAuth = getAuth(app);

        setDb(firestoreDb);
        setAuth(firebaseAuth);
        setProjectId(firebaseConfig.projectId);

        onAuthStateChanged(firebaseAuth, (user) => {
          if (user) {
            setUserId(user.uid);
          } else {
            setUserId(null);
          }
          setLoading(false);
        });

      } catch (err) {
        console.error("Erro ao inicializar Firebase:", err);
        setError("Erro ao inicializar o aplicativo. Tente novamente.");
        setLoading(false);
      }
    };

    initializeFirebase();
  }, []);

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-purple-400 to-indigo-600">
        <div className="text-white text-3xl font-bold animate-fade-in-down">Carregando Não quero ir só...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-red-100 text-red-700 p-4 rounded-lg">
        {error}
      </div>
    );
  }

  return (
    <FirebaseContext.Provider value={{ db, auth, userId, projectId }}>
      {children}
    </FirebaseContext.Provider>
  );
};

const useFirebase = () => useContext(FirebaseContext);

const FloatingMessage = ({ message, type, onClose }) => {
  const bgColor = type === 'success' ? 'bg-green-500' : 'bg-red-500';
  const textColor = 'text-white';

  if (!message) return null;

  return (
    <div className={`fixed bottom-4 left-1/2 -translate-x-1/2 p-3 rounded-lg shadow-lg ${bgColor} ${textColor} z-50 flex items-center justify-between animate-fade-in-up`}>
      <span>{message}</span>
      <button onClick={onClose} className="ml-4 font-bold text-lg">X</button>
    </div>
  );
};

const ConfirmationModal = ({ message, onConfirm, onCancel }) => {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 animate-fade-in">
      <div className="bg-white p-6 rounded-xl shadow-lg max-w-sm w-full text-center transform scale-95 animate-zoom-in">
        <p className="text-lg font-semibold mb-4">{message}</p>
        <div className="flex justify-center space-x-4">
          <button
            onClick={onConfirm}
            className="px-5 py-2 bg-red-500 text-white rounded-lg font-semibold hover:bg-red-600 transition duration-200"
          >
            Confirmar
          </button>
          <button
            onClick={onCancel}
            className="px-5 py-2 bg-gray-300 text-gray-800 rounded-lg font-semibold hover:bg-gray-400 transition duration-200"
          >
            Cancelar
          </button>
        </div>
      </div>
    </div>
  );
};

// Novo componente para exibir a foto do perfil em um modal
const PhotoModal = ({ imageUrl, onClose }) => {
  if (!imageUrl) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 animate-fade-in">
      <div className="relative p-4 rounded-xl max-w-2xl w-full mx-auto">
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-white text-3xl font-bold bg-black bg-opacity-50 rounded-full w-10 h-10 flex items-center justify-center hover:bg-opacity-75 transition duration-200"
        >
          &times;
        </button>
        <img
          src={imageUrl}
          alt="Foto de Perfil Ampliada"
          className="w-full h-auto rounded-xl shadow-lg max-h-[80vh] object-contain animate-zoom-in"
        />
      </div>
    </div>
  );
};

const AuthScreen = ({ setCurrentScreen, showMessage }) => {
  const { auth } = useFirebase();
  const [isLogin, setIsLogin] = useState(true);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);

  const handleAuth = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      if (isLogin) {
        await signInWithEmailAndPassword(auth, email, password);
        showMessage('Login realizado com sucesso!', 'success');
      } else {
        await createUserWithEmailAndPassword(auth, email, password);
        showMessage('Cadastro realizado com sucesso!', 'success');
      }
      setCurrentScreen('home');
    } catch (error) {
      console.error('Erro de autenticação:', error);
      showMessage(`Erro: ${error.message}`, 'error');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-400 to-indigo-600 p-4">
      <div className="bg-white p-8 rounded-xl shadow-2xl w-full max-w-md transform transition-all duration-500 ease-in-out scale-95 hover:scale-100">
        <h1 className="text-4xl font-extrabold text-center text-indigo-700 mb-2 animate-fade-in-down">
          Não quero ir só
        </h1>
        <p className="text-center text-gray-600 mb-6 animate-fade-in-up">
          Conectando pessoas para viverem novas experiências, juntas.
        </p>
        <h2 className="text-3xl font-bold text-center text-gray-800 mb-6">
          {isLogin ? 'Entrar' : 'Cadastrar'}
        </h2>
        <form onSubmit={handleAuth} className="space-y-4">
          <div>
            <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="email">
              Email
            </label>
            <input
              type="email"
              id="email"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition duration-200"
              placeholder="seuemail@exemplo.com"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>
          <div>
            <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="password">
              Senha
            </label>
            <div className="relative">
              <input
                type={showPassword ? 'text' : 'password'}
                id="password"
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition duration-200 pr-10"
                placeholder="********"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
              >
                {showPassword ? (
                  <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.418 0-8-3.582-8-8s3.582-8 8-8 8 3.582 8 8c0 1.01-.183 1.98-.525 2.875m-5.353-5.353a3 3 0 11-4.242-4.242M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>
                ) : (
                  <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path></svg>
                )}
              </button>
            </div>
          </div>
          <button
            type="submit"
            className="w-full bg-indigo-600 text-white py-3 rounded-lg font-semibold text-lg hover:bg-indigo-700 transition duration-300 transform hover:scale-105 disabled:opacity-50"
            disabled={loading}
          >
            {loading ? 'Carregando...' : (isLogin ? 'Entrar' : 'Cadastrar')}
          </button>
        </form>
        <div className="mt-6 text-center">
          <button
            onClick={() => setIsLogin(!isLogin)}
            className="text-indigo-600 hover:text-indigo-800 font-medium transition duration-200"
          >
            {isLogin ? 'Não tem uma conta? Cadastre-se' : 'Já tem uma conta? Faça login'}
          </button>
        </div>
        <div className="mt-8 text-center text-gray-600 text-sm">
          <a href="https://x.com/LuhHeenry" target="_blank" rel="noopener noreferrer" className="hover:underline text-indigo-600">
            Ideia do app por @LuhHeenry
          </a>
        </div>
      </div>
    </div>
  );
};

const ProfileScreen = ({ setCurrentScreen, showMessage }) => {
  const { db, auth, userId, projectId } = useFirebase();
  const [name, setName] = useState('');
  const [age, setAge] = useState('');
  const [interests, setInterests] = useState('');
  const [bio, setBio] = useState('');
  const [location, setLocation] = useState('');
  const [profileImageFile, setProfileImageFile] = useState(null);
  const [profileImageUrl, setProfileImageUrl] = useState('');
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [imageUploading, setImageUploading] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [showChangePasswordModal, setShowChangePasswordModal] = useState(false);
  const [currentPassword, setCurrentPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [passwordChangeLoading, setPasswordChangeLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);

  useEffect(() => {
    const fetchProfile = async () => {
      if (!db || !userId || !projectId) return;
      try {
        const docRef = doc(db, `artifacts/${projectId}/users/${userId}/profiles`, 'myProfile');
        const docSnap = await getDoc(docRef);
        if (docSnap.exists()) {
          const data = docSnap.data();
          setName(data.name || '');
          setAge(data.age || '');
          setInterests(data.interests ? data.interests.join(', ') : '');
          setBio(data.bio || '');
          setLocation(data.location || '');
          setProfileImageUrl(data.profileImageUrl || '');
        }
      } catch (error) {
        console.error('Erro ao buscar perfil:', error);
        showMessage('Erro ao carregar perfil.', 'error');
      } finally {
        setLoading(false);
      }
    };
    fetchProfile();
  }, [db, userId, projectId, showMessage]);

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setProfileImageFile(file);
    } else {
      setProfileImageFile(null);
    }
  };

  const uploadImageToImgBB = async (imageFile) => {
    setImageUploading(true);
    try {
      const formData = new FormData();
      formData.append('image', imageFile);

      const response = await fetch(`https://api.imgbb.com/1/upload?key=${IMGBB_API_KEY}`, {
        method: 'POST',
        body: formData,
      });

      const result = await response.json();

      if (result.success) {
        showMessage('Imagem enviada com sucesso!', 'success');
        return result.data.url;
      } else {
        throw new Error(result.error.message || 'Falha ao enviar imagem para o ImgBB.');
      }
    } catch (error) {
      console.error('Erro ao enviar imagem:', error);
      showMessage(`Erro ao enviar imagem: ${error.message}`, 'error');
      return null;
    } finally {
      setImageUploading(false);
    }
  };

  const handleSaveProfile = async (e) => {
    e.preventDefault();
    setSaving(true);
    if (!db || !userId || !projectId) {
      showMessage('Erro: Usuário não autenticado ou projeto não definido.', 'error');
      setSaving(false);
      return;
    }

    if (Number(age) < 18) {
      showMessage('Você deve ter 18 anos ou mais para usar o aplicativo.', 'error');
      setSaving(false);
      return;
    }

    let imageUrlToSave = profileImageUrl;
    if (profileImageFile) {
      const uploadedUrl = await uploadImageToImgBB(profileImageFile);
      if (uploadedUrl) {
        imageUrlToSave = uploadedUrl;
      } else {
        setSaving(false);
        return;
      }
    }

    try {
      const docRef = doc(db, `artifacts/${projectId}/users/${userId}/profiles`, 'myProfile');
      await setDoc(docRef, {
        name,
        age: Number(age),
        interests: interests.split(',').map(i => i.trim()).filter(i => i),
        bio,
        location,
        profileImageUrl: imageUrlToSave,
        updatedAt: serverTimestamp()
      }, { merge: true });
      showMessage('Perfil salvo com sucesso!', 'success');
      setProfileImageFile(null);
    } catch (error) {
      console.error('Erro ao salvar perfil:', error);
      showMessage('Erro ao salvar perfil.', 'error');
    } finally {
      setSaving(false);
    }
  };

  const handleChangePassword = async (e) => {
    e.preventDefault();
    setPasswordChangeLoading(true);
    const user = auth.currentUser;
    if (!user || !user.email) {
      showMessage('Erro: Usuário não logado ou sem email.', 'error');
      setPasswordChangeLoading(false);
      return;
    }

    try {
      const credential = EmailAuthProvider.credential(user.email, currentPassword);
      await reauthenticateWithCredential(user, credential);
      await updatePassword(user, newPassword);
      showMessage('Senha alterada com sucesso!', 'success');
      setShowChangePasswordModal(false);
      setCurrentPassword('');
      setNewPassword('');
    } catch (error) {
      console.error('Erro ao trocar senha:', error);
      showMessage(`Erro ao trocar senha: ${error.message}`, 'error');
    } finally {
      setPasswordChangeLoading(false);
    }
  };

  const handleDeleteProfile = async () => {
    if (!db || !userId || !projectId) {
      showMessage('Erro: Usuário não autenticado ou projeto não definido.', 'error');
      return;
    }

    setSaving(true);
    try {
      const user = auth.currentUser;
      if (!user) {
        showMessage('Erro: Nenhum usuário logado para excluir.', 'error');
        return;
      }

      const profileDocRef = doc(db, `artifacts/${projectId}/users/${userId}/profiles`, 'myProfile');
      await deleteDoc(profileDocRef);

      const eventsQuery = query(collection(db, `artifacts/${projectId}/public/data/events`), where('creatorId', '==', userId));
      const eventsSnapshot = await getDocs(eventsQuery);
      for (const docSnapshot of eventsSnapshot.docs) {
        await deleteDoc(doc(db, `artifacts/${projectId}/public/data/events`, docSnapshot.id));
      }

      const allEventsQuery = query(collection(db, `artifacts/${projectId}/public/data/events`));
      const allEventsSnapshot = await getDocs(allEventsQuery);
      for (const eventDoc of allEventsSnapshot.docs) {
        const commentsQuery = query(collection(db, `artifacts/${projectId}/public/data/events/${eventDoc.id}/comments`), where('creatorId', '==', userId));
        const commentsSnapshot = await getDocs(commentsQuery);
        for (const commentDoc of commentsSnapshot.docs) {
          await deleteDoc(doc(db, `artifacts/${projectId}/public/data/events/${eventDoc.id}/comments`, commentDoc.id));
        }
      }

      const globalChatQuery = query(collection(db, `artifacts/${projectId}/public/data/global_chat_messages`), where('senderId', '==', userId));
      const globalChatSnapshot = await getDocs(globalChatQuery);
      for (const msgDoc of globalChatSnapshot.docs) {
        await deleteDoc(doc(db, `artifacts/${projectId}/public/data/global_chat_messages`, msgDoc.id));
      }

      await deleteUser(user);

      showMessage('Perfil e todos os dados associados excluídos permanentemente.', 'success');
      setShowDeleteConfirm(false);
      setCurrentScreen('auth');
    } catch (error) {
      console.error('Erro ao excluir perfil:', error);
      showMessage(`Erro ao excluir perfil: ${error.message}`, 'error');
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-100">
        <div className="text-xl font-semibold text-gray-700">Carregando perfil...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100 p-4 flex flex-col items-center">
      <div className="bg-white p-6 rounded-xl shadow-lg w-full max-w-2xl mx-auto mt-8 transform transition-all duration-300 ease-in-out scale-95 hover:scale-100">
        <h2 className="text-2xl font-bold text-gray-800 mb-6 text-center">Meu Perfil</h2>
        <form onSubmit={handleSaveProfile} className="space-y-4">
          <div className="flex flex-col items-center mb-4">
            {profileImageUrl ? (
              <img
                src={profileImageUrl}
                alt="Foto de Perfil"
                className="w-32 h-32 rounded-full object-cover border-4 border-indigo-300 shadow-md transition-transform duration-300 transform hover:scale-105"
              />
            ) : (
              <div className="w-32 h-32 rounded-full bg-gray-300 flex items-center justify-center text-gray-600 text-sm font-semibold">
                Sem Foto
              </div>
            )}
            <label htmlFor="profileImage" className="mt-4 px-4 py-2 bg-indigo-500 text-white rounded-lg cursor-pointer hover:bg-indigo-600 transition duration-200 transform hover:scale-105">
              {imageUploading ? 'Enviando Imagem...' : 'Alterar Foto'}
            </label>
            <input
              type="file"
              id="profileImage"
              accept="image/*"
              className="hidden"
              onChange={handleImageChange}
              disabled={imageUploading}
            />
          </div>

          <div className="text-center mb-4">
            <p className="text-gray-800 text-xl font-bold">{name || 'Nome não definido'}</p>
            <p className="text-gray-600 text-sm">UID: {userId}</p>
            <p className="text-gray-600 text-sm">{location || 'Localização não definida'}</p>
          </div>

          <div>
            <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="name">Nome</label>
            <input
              type="text"
              id="name"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
            />
          </div>
          <div>
            <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="age">Idade</label>
            <input
              type="number"
              id="age"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
              value={age}
              onChange={(e) => setAge(e.target.value)}
            />
          </div>
          <div>
            <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="location">Localização (Cidade/Estado)</label>
            <input
              type="text"
              id="location"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
              value={location}
              onChange={(e) => setLocation(e.target.value)}
              placeholder="Ex: Rio de Janeiro, RJ"
              list="location-suggestions"
            />
            <datalist id="location-suggestions">
              {MOCK_LOCATIONS.map((loc, index) => (
                <option key={index} value={loc} />
              ))}
            </datalist>
          </div>
          <div>
            <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="interests">Interesses (separados por vírgula)</label>
            <input
              type="text"
              id="interests"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
              value={interests}
              onChange={(e) => setInterests(e.target.value)}
            />
          </div>
          <div>
            <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="bio">Biografia</label>
            <textarea
              id="bio"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 h-24 resize-none transition duration-200"
              value={bio}
              onChange={(e) => setBio(e.target.value)}
            ></textarea>
          </div>
          <button
            type="submit"
            className="w-full bg-indigo-600 text-white py-3 rounded-lg font-semibold text-lg hover:bg-indigo-700 transition duration-300 transform hover:scale-105 disabled:opacity-50"
            disabled={saving || imageUploading}
          >
            {saving || imageUploading ? 'Salvando...' : 'Salvar Perfil'}
          </button>
        </form>

        <div className="mt-6 space-y-3">
          <button
            onClick={() => setShowChangePasswordModal(true)}
            className="w-full bg-blue-500 text-white py-3 rounded-lg font-semibold text-lg hover:bg-blue-600 transition duration-300 transform hover:scale-105 shadow-md"
          >
            Trocar Senha
          </button>
          <button
            onClick={() => setShowDeleteConfirm(true)}
            className="w-full bg-red-500 text-white py-3 rounded-lg font-semibold text-lg hover:bg-red-600 transition duration-300 transform hover:scale-105 shadow-md"
          >
            Excluir Perfil Permanentemente
          </button>
        </div>

        <div className="mt-8 text-center text-gray-600 text-sm">
          <a href="https://x.com/LuhHeenry" target="_blank" rel="noopener noreferrer" className="hover:underline text-indigo-600">
            Ideia do app por @LuhHeenry
          </a>
        </div>
      </div>

      {showDeleteConfirm && (
        <ConfirmationModal
          message="Tem certeza que deseja excluir seu perfil permanentemente? Todos os seus dados (perfil, eventos criados, comentários, mensagens do chat global) serão apagados e esta ação é irreversível."
          onConfirm={handleDeleteProfile}
          onCancel={() => setShowDeleteConfirm(false)}
        />
      )}

      {showChangePasswordModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 animate-fade-in">
          <div className="bg-white p-6 rounded-xl shadow-lg max-w-sm w-full text-center transform scale-95 animate-zoom-in">
            <h3 className="text-xl font-bold text-gray-800 mb-4">Trocar Senha</h3>
            <form onSubmit={handleChangePassword} className="space-y-4">
              <div>
                <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="currentPassword">Senha Atual</label>
                <div className="relative">
                  <input
                    type={showPassword ? 'text' : 'password'}
                    id="currentPassword"
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 pr-10"
                    value={currentPassword}
                    onChange={(e) => setCurrentPassword(e.target.value)}
                    required
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                  >
                    {showPassword ? (
                      <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.418 0-8-3.582-8-8s3.582-8 8-8 8 3.582 8 8c0 1.01-.183 1.98-.525 2.875m-5.353-5.353a3 3 0 11-4.242-4.242M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>
                    ) : (
                      <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path></svg>
                    )}
                  </button>
                </div>
              </div>
              <div>
                <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="newPassword">Nova Senha</label>
                <div className="relative">
                  <input
                    type={showPassword ? 'text' : 'password'}
                    id="newPassword"
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 pr-10"
                    value={newPassword}
                    onChange={(e) => setNewPassword(e.target.value)}
                    required
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                  >
                    {showPassword ? (
                      <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.418 0-8-3.582-8-8s3.582-8 8-8 8 3.582 8 8c0 1.01-.183 1.98-.525 2.875m-5.353-5.353a3 3 0 11-4.242-4.242M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>
                    ) : (
                      <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path></svg>
                    )}
                  </button>
                </div>
              </div>
              <div className="flex justify-center space-x-4">
                <button
                  type="button"
                  onClick={() => setShowChangePasswordModal(false)}
                  className="px-5 py-2 bg-gray-300 text-gray-800 rounded-lg font-semibold hover:bg-gray-400 transition duration-200"
                >
                  Cancelar
                </button>
                <button
                  type="submit"
                  className="px-5 py-2 bg-indigo-600 text-white rounded-lg font-semibold hover:bg-indigo-700 transition duration-200 disabled:opacity-50"
                  disabled={passwordChangeLoading}
                >
                  {passwordChangeLoading ? 'Trocando...' : 'Confirmar'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

const CreateEventScreen = ({ setCurrentScreen, showMessage }) => {
  const { db, userId, projectId } = useFirebase();
  const [eventName, setEventName] = useState('');
  const [eventDate, setEventDate] = useState('');
  const [eventTime, setEventTime] = useState('');
  const [eventLocation, setEventLocation] = useState('');
  const [eventDescription, setEventDescription] = useState('');
  const [whatsappLink, setWhatsappLink] = useState('');
  const [otherContacts, setOtherContacts] = useState('');
  const [transportation, setTransportation] = useState('');
  const [splitTransportation, setSplitTransportation] = useState(false);
  const [loading, setLoading] = useState(false);

  const handleCreateEvent = async (e) => {
    e.preventDefault();
    setLoading(true);
    if (!db || !userId || !projectId) {
      showMessage('Erro: Usuário não autenticado ou projeto não definido.', 'error');
      setLoading(false);
      return;
    }

    let creatorName = 'Usuário Desconhecido';
    let creatorProfileImageUrl = '';
    try {
      const profileDocRef = doc(db, `artifacts/${projectId}/users/${userId}/profiles`, 'myProfile');
      const profileDocSnap = await getDoc(profileDocRef);
      if (profileDocSnap.exists()) {
        const profileData = profileDocSnap.data();
        creatorName = profileData.name || creatorName;
        creatorProfileImageUrl = profileData.profileImageUrl || '';
      }
    } catch (profileError) {
      console.warn('Não foi possível buscar o perfil do criador para o evento:', profileError);
    }

    try {
      await addDoc(collection(db, `artifacts/${projectId}/public/data/events`), {
        name: eventName,
        date: eventDate,
        time: eventTime,
        location: eventLocation,
        description: eventDescription,
        creatorId: userId,
        creatorName: creatorName,
        creatorProfileImageUrl: creatorProfileImageUrl,
        whatsappLink: whatsappLink,
        otherContacts: otherContacts,
        transportation: transportation,
        splitTransportation: splitTransportation,
        createdAt: serverTimestamp(),
        interestedUsers: [],
      });
      showMessage('Evento criado com sucesso!', 'success');
      setCurrentScreen('home');
    } catch (error) {
      console.error('Erro ao criar evento:', error);
      showMessage('Erro ao criar evento.', 'error');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 p-4">
      <div className="bg-white p-6 rounded-xl shadow-lg max-w-md mx-auto mt-8 transform transition-all duration-300 ease-in-out scale-95 hover:scale-100">
        <h2 className="text-2xl font-bold text-gray-800 mb-6 text-center">Criar Novo Evento</h2>
        <form onSubmit={handleCreateEvent} className="space-y-4">
          <div>
            <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="eventName">Nome do Evento</label>
            <input
              type="text"
              id="eventName"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
              value={eventName}
              onChange={(e) => setEventName(e.target.value)}
              required
            />
          </div>
          <div>
            <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="eventDate">Data (AAAA-MM-DD)</label>
            <input
              type="date"
              id="eventDate"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
              value={eventDate}
              onChange={(e) => setEventDate(e.target.value)}
              required
            />
          </div>
          <div>
            <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="eventTime">Hora</label>
            <input
              type="time"
              id="eventTime"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
              value={eventTime}
              onChange={(e) => setEventTime(e.target.value)}
              required
            />
          </div>
          <div>
            <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="eventLocation">Localização</label>
            <input
              type="text"
              id="eventLocation"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
              value={eventLocation}
              onChange={(e) => setEventLocation(e.target.value)}
              placeholder="Ex: Parque Ibirapuera, São Paulo"
              required
              list="location-suggestions"
            />
            <datalist id="location-suggestions">
              {MOCK_LOCATIONS.map((loc, index) => (
                <option key={index} value={loc} />
              ))}
            </datalist>
          </div>
          <div>
            <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="eventDescription">Descrição</label>
            <textarea
              id="eventDescription"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 h-24 resize-none transition duration-200"
              value={eventDescription}
              onChange={(e) => setEventDescription(e.target.value)}
            ></textarea>
          </div>

          <div>
            <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="whatsappLink">Link Grupo WhatsApp (Opcional)</label>
            <input
              type="url"
              id="whatsappLink"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
              value={whatsappLink}
              onChange={(e) => setWhatsappLink(e.target.value)}
              placeholder="Ex: https://chat.whatsapp.com/..."
            />
          </div>
          <div>
            <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="otherContacts">Outros Contatos (Opcional)</label>
            <input
              type="text"
              id="otherContacts"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
              value={otherContacts}
              onChange={(e) => setOtherContacts(e.target.value)}
              placeholder="Ex: @seunome_instagram, (XX) XXXXX-XXXX"
            />
          </div>
          <div>
            <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="transportation">Meio de Transporte (Opcional)</label>
            <select
              id="transportation"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
              value={transportation}
              onChange={(e) => setTransportation(e.target.value)}
            >
              <option value="">Selecione</option>
              <option value="Uber/99">Uber/99</option>
              <option value="Metrô">Metrô</option>
              <option value="Ônibus">Ônibus</option>
              <option value="Carro Próprio">Carro Próprio</option>
              <option value="Bicicleta">Bicicleta</option>
              <option value="Outro">Outro</option>
            </select>
          </div>
          <div className="flex items-center">
            <input
              type="checkbox"
              id="splitTransportation"
              className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
              checked={splitTransportation}
              onChange={(e) => setSplitTransportation(e.target.checked)}
            />
            <label htmlFor="splitTransportation" className="ml-2 block text-sm text-gray-900">
              Dividir transporte?
            </label>
          </div>

          <button
            type="submit"
            className="w-full bg-indigo-600 text-white py-3 rounded-lg font-semibold text-lg hover:bg-indigo-700 transition duration-300 transform hover:scale-105 disabled:opacity-50"
            disabled={loading}
          >
            {loading ? 'Criando...' : 'Criar Evento'}
          </button>
          <button
            type="button"
            onClick={() => setCurrentScreen('home')}
            className="w-full mt-2 bg-gray-300 text-gray-800 py-3 rounded-lg font-semibold text-lg hover:bg-gray-400 transition duration-300"
          >
            Voltar
          </button>
        </form>
      </div>
    </div>
  );
};

const EditEventScreen = ({ setCurrentScreen, showMessage, eventToEdit }) => {
  const { db, userId, projectId } = useFirebase();
  const [eventName, setEventName] = useState(eventToEdit.name || '');
  const [eventDate, setEventDate] = useState(eventToEdit.date || '');
  const [eventTime, setEventTime] = useState(eventToEdit.time || '');
  const [eventLocation, setEventLocation] = useState(eventToEdit.location || '');
  const [eventDescription, setEventDescription] = useState(eventToEdit.description || '');
  const [whatsappLink, setWhatsappLink] = useState(eventToEdit.whatsappLink || '');
  const [otherContacts, setOtherContacts] = useState(eventToEdit.otherContacts || '');
  const [transportation, setTransportation] = useState(eventToEdit.transportation || '');
  const [splitTransportation, setSplitTransportation] = useState(eventToEdit.splitTransportation || false);
  const [loading, setLoading] = useState(false);

  const handleUpdateEvent = async (e) => {
    e.preventDefault();
    setLoading(true);
    if (!db || !userId || !projectId) {
      showMessage('Erro: Usuário não autenticado ou projeto não definido.', 'error');
      setLoading(false);
      return;
    }
    try {
      const eventRef = doc(db, `artifacts/${projectId}/public/data/events`, eventToEdit.id);
      await updateDoc(eventRef, {
        name: eventName,
        date: eventDate,
        time: eventTime,
        location: eventLocation,
        description: eventDescription,
        whatsappLink: whatsappLink,
        otherContacts: otherContacts,
        transportation: transportation,
        splitTransportation: splitTransportation,
        updatedAt: serverTimestamp()
      });
      showMessage('Evento atualizado com sucesso!', 'success');
      setCurrentScreen('home');
    } catch (error) {
      console.error('Erro ao atualizar evento:', error);
      showMessage('Erro ao atualizar evento.', 'error');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 p-4">
      <div className="bg-white p-6 rounded-xl shadow-lg max-w-md mx-auto mt-8 transform transition-all duration-300 ease-in-out scale-95 hover:scale-100">
        <h2 className="text-2xl font-bold text-gray-800 mb-6 text-center">Editar Evento</h2>
        <form onSubmit={handleUpdateEvent} className="space-y-4">
          <div>
            <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="eventName">Nome do Evento</label>
            <input
              type="text"
              id="eventName"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
              value={eventName}
              onChange={(e) => setEventName(e.target.value)}
              required
            />
          </div>
          <div>
            <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="eventDate">Data (AAAA-MM-DD)</label>
            <input
              type="date"
              id="eventDate"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
              value={eventDate}
              onChange={(e) => setEventDate(e.target.value)}
              required
            />
          </div>
          <div>
            <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="eventTime">Hora</label>
            <input
              type="time"
              id="eventTime"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
              value={eventTime}
              onChange={(e) => setEventTime(e.target.value)}
              required
            />
          </div>
          <div>
            <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="eventLocation">Localização</label>
            <input
              type="text"
              id="eventLocation"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
              value={eventLocation}
              onChange={(e) => setEventLocation(e.target.value)}
              placeholder="Ex: Parque Ibirapuera, São Paulo"
              required
              list="location-suggestions"
            />
            <datalist id="location-suggestions">
              {MOCK_LOCATIONS.map((loc, index) => (
                <option key={index} value={loc} />
              ))}
            </datalist>
          </div>
          <div>
            <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="eventDescription">Descrição</label>
            <textarea
              id="eventDescription"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 h-24 resize-none transition duration-200"
              value={eventDescription}
              onChange={(e) => setEventDescription(e.target.value)}
            ></textarea>
          </div>

          <div>
            <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="whatsappLink">Link Grupo WhatsApp (Opcional)</label>
            <input
              type="url"
              id="whatsappLink"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
              value={whatsappLink}
              onChange={(e) => setWhatsappLink(e.target.value)}
              placeholder="Ex: https://chat.whatsapp.com/..."
            />
          </div>
          <div>
            <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="otherContacts">Outros Contatos (Opcional)</label>
            <input
              type="text"
              id="otherContacts"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
              value={otherContacts}
              onChange={(e) => setOtherContacts(e.target.value)}
              placeholder="Ex: @seunome_instagram, (XX) XXXXX-XXXX"
            />
          </div>
          <div>
            <label className="block text-gray-700 text-sm font-semibold mb-2" htmlFor="transportation">Meio de Transporte (Opcional)</label>
            <select
              id="transportation"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
              value={transportation}
              onChange={(e) => setTransportation(e.target.value)}
            >
              <option value="">Selecione</option>
              <option value="Uber/99">Uber/99</option>
              <option value="Metrô">Metrô</option>
              <option value="Ônibus">Ônibus</option>
              <option value="Carro Próprio">Carro Próprio</option>
              <option value="Bicicleta">Bicicleta</option>
              <option value="Outro">Outro</option>
            </select>
          </div>
          <div className="flex items-center">
            <input
              type="checkbox"
              id="splitTransportation"
              className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
              checked={splitTransportation}
              onChange={(e) => setSplitTransportation(e.target.checked)}
            />
            <label htmlFor="splitTransportation" className="ml-2 block text-sm text-gray-900">
              Dividir transporte?
            </label>
          </div>

          <button
            type="submit"
            className="w-full bg-indigo-600 text-white py-3 rounded-lg font-semibold text-lg hover:bg-indigo-700 transition duration-300 transform hover:scale-105 disabled:opacity-50"
            disabled={loading}
          >
            {loading ? 'Atualizando...' : 'Atualizar Evento'}
          </button>
          <button
            type="button"
            onClick={() => setCurrentScreen('home')}
            className="w-full mt-2 bg-gray-300 text-gray-800 py-3 rounded-lg font-semibold text-lg hover:bg-gray-400 transition duration-300"
          >
            Voltar
          </button>
        </form>
      </div>
    </div>
  );
};


const EventListScreen = ({ setCurrentScreen, setSelectedEvent, showMessage }) => {
  const { db, userId, projectId } = useFirebase();
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterLocation, setFilterLocation] = useState('');
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [eventToDelete, setEventToDelete] = useState(null);

  useEffect(() => {
    if (!db || !projectId) return;

    const eventsCollectionRef = collection(db, `artifacts/${projectId}/public/data/events`);
    let q = query(eventsCollectionRef, orderBy('createdAt', 'desc'));

    const unsubscribe = onSnapshot(q, async (snapshot) => {
      const eventsData = snapshot.docs.map(docSnapshot => {
        const event = { id: docSnapshot.id, ...docSnapshot.data() };
        return event;
      });
      setEvents(eventsData);
      setLoading(false);
    }, (error) => {
      console.error("Erro ao buscar eventos:", error);
      showMessage("Erro ao carregar eventos.", "error");
      setLoading(false);
    });

    return () => unsubscribe();
  }, [db, projectId, showMessage]);

  const handleInterest = async (eventId, interestedUsers) => {
    if (!db || !userId || !projectId) {
      showMessage('Erro: Usuário não autenticado.', 'error');
      return;
    }

    const eventRef = doc(db, `artifacts/${projectId}/public/data/events`, eventId);
    let updatedInterestedUsers;

    if (interestedUsers && interestedUsers.includes(userId)) {
      updatedInterestedUsers = interestedUsers.filter(id => id !== userId);
    } else {
      updatedInterestedUsers = interestedUsers ? [...interestedUsers, userId] : [userId];
    }

    try {
      await updateDoc(eventRef, { interestedUsers: updatedInterestedUsers });
      showMessage(
        interestedUsers && interestedUsers.includes(userId) ? 'Interesse removido!' : 'Interesse adicionado!',
        'success'
      );
    } catch (error) {
      console.error('Erro ao atualizar interesse:', error);
      showMessage('Erro ao atualizar interesse. Verifique as regras de segurança do Firestore.', 'error');
    }
  };

  const confirmDelete = (event) => {
    setEventToDelete(event);
    setShowDeleteConfirm(true);
  };

  const executeDelete = async () => {
    if (!db || !userId || !projectId || !eventToDelete) {
      showMessage('Erro: Não foi possível apagar o evento.', 'error');
      return;
    }
    try {
      await deleteDoc(doc(db, `artifacts/${projectId}/public/data/events`, eventToDelete.id));
      showMessage('Evento apagado com sucesso!', 'success');
      setEventToDelete(null);
      setShowDeleteConfirm(false);
    } catch (error) {
      console.error('Erro ao apagar evento:', error);
      showMessage('Erro ao apagar evento.', 'error');
    }
  };

  const filteredEvents = events.filter(event => {
    const matchesSearch = event.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          event.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesLocation = filterLocation === '' ||
                            event.location.toLowerCase().includes(filterLocation.toLowerCase());
    return matchesSearch && matchesLocation;
  });

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-100">
        <div className="text-xl font-semibold text-gray-700">Carregando eventos...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100 p-4 pb-20 overflow-y-auto">
      <h1 className="text-4xl font-extrabold text-center text-indigo-700 mb-6 animate-fade-in-down">
        Não quero ir só
      </h1>
      <h2 className="text-2xl font-bold text-gray-800 mb-6 text-center">Eventos Próximos</h2>
      <button
        onClick={() => setCurrentScreen('createEvent')}
        className="w-full bg-green-500 text-white py-3 rounded-lg font-semibold text-lg hover:bg-green-600 transition duration-300 transform hover:scale-105 mb-4 shadow-md"
      >
        + Criar Novo Evento
      </button>

      <div className="mb-4 space-y-3">
        <div className="relative">
          <input
            type="text"
            placeholder="Pesquisar por nome ou descrição..."
            className="w-full px-4 py-2 pl-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200 shadow-sm"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <svg className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg>
        </div>
        <input
          type="text"
          placeholder="Filtrar por localização (cidade/estado)..."
          className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200 shadow-sm"
          value={filterLocation}
          onChange={(e) => setFilterLocation(e.target.value)}
          list="location-suggestions-filter"
        />
        <datalist id="location-suggestions-filter">
          {MOCK_LOCATIONS.map((loc, index) => (
            <option key={index} value={loc} />
          ))}
        </datalist>
      </div>

      {filteredEvents.length === 0 ? (
        <p className="text-center text-gray-600 mt-8">Nenhum evento encontrado. Crie um!</p>
      ) : (
        <div className="space-y-4">
          {filteredEvents.map((event) => (
            <div key={event.id} className="bg-white p-5 rounded-xl shadow-md border border-gray-200 transform transition-all duration-300 ease-in-out hover:scale-[1.02]">
              <div className="flex items-center mb-3">
                {event.creatorProfileImageUrl ? (
                  <img
                    src={event.creatorProfileImageUrl}
                    alt="Foto do Criador"
                    className="w-10 h-10 rounded-full object-cover mr-3 border-2 border-purple-400"
                  />
                ) : (
                  <div className="w-10 h-10 rounded-full bg-gray-300 flex items-center justify-center text-gray-600 text-xs mr-3">
                    PF
                  </div>
                )}
                <p className="font-semibold text-gray-700">{event.creatorName || 'Usuário Desconhecido'}</p>
              </div>
              <h3 className="text-xl font-semibold text-gray-800 mb-2">{event.name}</h3>
              <p className="text-gray-600 text-sm mb-1">
                <span className="font-medium">Data:</span> {event.date} às {event.time}
              </p>
              <p className="text-gray-600 text-sm mb-1">
                <span className="font-medium">Local:</span> {event.location}
              </p>
              <p className="text-gray-700 mb-3 text-sm">{event.description}</p>

              <p className="text-gray-500 text-xs mb-3">
                Interessados: {event.interestedUsers ? event.interestedUsers.length : 0}
              </p>
              <div className="flex space-x-2">
                <button
                  onClick={() => handleInterest(event.id, event.interestedUsers || [])}
                  className={`flex-1 py-2 rounded-lg font-semibold text-sm transition duration-300 ${
                    event.interestedUsers && event.interestedUsers.includes(userId)
                      ? 'bg-red-500 text-white hover:bg-red-600'
                      : 'bg-indigo-600 text-white hover:bg-indigo-700'
                  } shadow-md`}
                >
                  {event.interestedUsers && event.interestedUsers.includes(userId) ? 'Não Quero Mais Ir' : 'Quero Ir!'}
                </button>
                <button
                  onClick={() => { setSelectedEvent(event); setCurrentScreen('eventDetail'); }}
                  className="flex-1 bg-gray-200 text-gray-800 py-2 rounded-lg font-semibold text-sm hover:bg-gray-300 transition duration-300 shadow-md"
                >
                  Ver Detalhes
                </button>
              </div>
              {event.creatorId === userId && (
                <div className="flex justify-end space-x-2 mt-3">
                  <button
                    onClick={() => { setSelectedEvent(event); setCurrentScreen('editEvent'); }}
                    className="px-3 py-1 bg-blue-500 text-white rounded-lg text-xs font-semibold hover:bg-blue-600 transition duration-200"
                  >
                    Editar
                  </button>
                  <button
                    onClick={() => confirmDelete(event)}
                    className="px-3 py-1 bg-red-500 text-white rounded-lg text-xs font-semibold hover:bg-red-600 transition duration-200"
                  >
                    Apagar
                  </button>
                </div>
              )}
            </div>
          ))}
        </div>
      )}
      {showDeleteConfirm && (
        <ConfirmationModal
          message={`Tem certeza que deseja apagar o evento "${eventToDelete?.name}"?`}
          onConfirm={executeDelete}
          onCancel={() => setShowDeleteConfirm(false)}
        />
      )}
    </div>
  );
};

const EventDetailScreen = ({ setCurrentScreen, selectedEvent, showMessage }) => {
  const { db, userId, projectId } = useFirebase();
  const [commentText, setCommentText] = useState('');
  const [comments, setComments] = useState([]);
  const [commentLoading, setCommentLoading] = useState(true);
  const [postingComment, setPostingComment] = useState(false);
  const [editingCommentId, setEditingCommentId] = useState(null);
  const [editingCommentText, setEditingCommentText] = useState('');
  const [showDeleteCommentConfirm, setShowDeleteCommentConfirm] = useState(false);
  const [commentToDelete, setCommentToDelete] = useState(null);
  const [selectedPhoto, setSelectedPhoto] = useState(null);

  const commentsEndRef = useRef(null);

  useEffect(() => {
    if (!db || !projectId || !selectedEvent?.id) {
      setCommentLoading(false);
      return;
    }

    const commentsCollectionRef = collection(db, `artifacts/${projectId}/public/data/events/${selectedEvent.id}/comments`);
    const q = query(commentsCollectionRef, orderBy('createdAt'));

    const unsubscribe = onSnapshot(q, async (snapshot) => {
      const fetchedComments = await Promise.all(snapshot.docs.map(async docSnapshot => {
        const comment = { id: docSnapshot.id, ...docSnapshot.data() };
        let creatorName = 'Usuário Desconhecido';
        let creatorProfileImageUrl = '';
        try {
          const profileDocRef = doc(db, `artifacts/${projectId}/users/${comment.creatorId}/profiles`, 'myProfile');
          const profileDocSnap = await getDoc(profileDocRef);
          if (profileDocSnap.exists()) {
            const profileData = profileDocSnap.data();
            creatorName = profileData.name || creatorName;
            creatorProfileImageUrl = profileData.profileImageUrl || '';
          }
        } catch (profileError) {
          console.warn('Não foi possível buscar o perfil do criador do comentário:', profileError);
        }
        return {
          ...comment,
          creatorName,
          creatorProfileImageUrl,
          createdAt: comment.createdAt?.toDate().toLocaleString('pt-BR') || 'agora'
        };
      }));
      setComments(fetchedComments);
      setCommentLoading(false);
    }, (error) => {
      console.error("Erro ao buscar comentários:", error);
      showMessage("Erro ao carregar comentários.", "error");
      setCommentLoading(false);
    });

    return () => unsubscribe();
  }, [db, projectId, selectedEvent?.id, showMessage]);

  useEffect(() => {
    commentsEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [comments]);


  const handlePostComment = async () => {
    if (commentText.trim() === '' || !db || !userId || !projectId || !selectedEvent?.id) {
      return;
    }
    setPostingComment(true);
    try {
      await addDoc(collection(db, `artifacts/${projectId}/public/data/events/${selectedEvent.id}/comments`), {
        text: commentText,
        creatorId: userId,
        createdAt: serverTimestamp(),
      });
      setCommentText('');
      showMessage('Comentário postado!', 'success');
    } catch (error) {
      console.error('Erro ao postar comentário:', error);
      showMessage('Erro ao postar comentário.', 'error');
    } finally {
      setPostingComment(false);
    }
  };

  const handleEditComment = (comment) => {
    setEditingCommentId(comment.id);
    setEditingCommentText(comment.text);
  };

  const handleSaveEditedComment = async (commentId) => {
    if (editingCommentText.trim() === '' || !db || !projectId || !selectedEvent?.id) {
      return;
    }
    setPostingComment(true);
    try {
      const commentRef = doc(db, `artifacts/${projectId}/public/data/events/${selectedEvent.id}/comments`, commentId);
      await updateDoc(commentRef, {
        text: editingCommentText,
        updatedAt: serverTimestamp(),
      });
      setEditingCommentId(null);
      setEditingCommentText('');
      showMessage('Comentário atualizado!', 'success');
    } catch (error) {
      console.error('Erro ao atualizar comentário:', error);
      showMessage('Erro ao atualizar comentário.', 'error');
    } finally {
      setPostingComment(false);
    }
  };

  const confirmDeleteComment = (comment) => {
    setCommentToDelete(comment);
    setShowDeleteCommentConfirm(true);
  };

  const executeDeleteComment = async () => {
    if (!db || !projectId || !selectedEvent?.id || !commentToDelete) {
      showMessage('Erro: Não foi possível apagar o comentário.', 'error');
      return;
    }
    try {
      await deleteDoc(doc(db, `artifacts/${projectId}/public/data/events/${selectedEvent.id}/comments`, commentToDelete.id));
      showMessage('Comentário apagado com sucesso!', 'success');
      setCommentToDelete(null);
      setShowDeleteCommentConfirm(false);
    } catch (error) {
      console.error('Erro ao apagar comentário:', error);
      showMessage('Erro ao apagar comentário.', 'error');
    }
  };

  const openPhotoModal = (imageUrl) => {
    setSelectedPhoto(imageUrl);
  };

  if (!selectedEvent) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <p className="text-gray-600">Nenhum evento selecionado.</p>
        <button
          onClick={() => setCurrentScreen('home')}
          className="mt-4 bg-indigo-600 text-white py-2 px-4 rounded-lg hover:bg-indigo-700"
        >
          Voltar para Eventos
        </button>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100 p-4 pb-20 overflow-y-auto">
      <div className="bg-white p-6 rounded-xl shadow-lg max-w-md mx-auto mt-8 transform transition-all duration-300 ease-in-out scale-95 hover:scale-100">
        <h2 className="text-2xl font-bold text-gray-800 mb-4 text-center">{selectedEvent.name}</h2>
        <p className="text-gray-600 mb-2"><span className="font-semibold">Data:</span> {selectedEvent.date} às {selectedEvent.time}</p>
        <p className="text-gray-600 mb-2"><span className="font-semibold">Local:</span> {selectedEvent.location}</p>
        <p className="text-gray-700 mb-4">{selectedEvent.description}</p>

        {selectedEvent.whatsappLink && (
          <p className="text-blue-600 text-sm mb-1">
            <a href={selectedEvent.whatsappLink} target="_blank" rel="noopener noreferrer" className="hover:underline">Grupo WhatsApp</a>
          </p>
        )}
        {selectedEvent.otherContacts && (
          <p className="text-gray-600 text-sm mb-1">
            <span className="font-medium">Outros Contatos:</span> {selectedEvent.otherContacts}
          </p>
        )}
        {selectedEvent.transportation && (
          <p className="text-gray-600 text-sm mb-1">
            <span className="font-medium">Transporte:</span> {selectedEvent.transportation} {selectedEvent.splitTransportation && '(Dividir)'}
          </p>
        )}

        <div className="mb-4 mt-4">
          <h3 className="text-lg font-semibold text-gray-800 mb-2">Criador do Evento:</h3>
            <div className="flex items-center space-x-3">
              {selectedEvent.creatorProfileImageUrl ? (
                <img
                  src={selectedEvent.creatorProfileImageUrl}
                  alt="Foto do Criador"
                  className="w-10 h-10 rounded-full object-cover border-2 border-purple-400 cursor-pointer"
                  onClick={() => openPhotoModal(selectedEvent.creatorProfileImageUrl)}
                />
              ) : (
                <div className="w-10 h-10 rounded-full bg-gray-300 flex items-center justify-center text-gray-600 text-xs">
                  PF
                </div>
              )}
              <p className="text-gray-700">{selectedEvent.creatorName || 'Nome Indisponível'}</p>
            </div>
        </div>

        <div className="mt-8 border-t pt-6 border-gray-200">
          <h3 className="text-xl font-bold text-gray-800 mb-4">Comentários</h3>
          <div className="space-y-4 max-h-60 overflow-y-auto p-2 bg-gray-50 rounded-lg border border-gray-200">
            {commentLoading ? (
              <p className="text-center text-gray-500">Carregando comentários...</p>
            ) : comments.length === 0 ? (
              <p className="text-center text-gray-500">Nenhum comentário ainda. Seja o primeiro!</p>
            ) : (
              comments.map((comment) => (
                <div key={comment.id} className="bg-white p-3 rounded-lg shadow-sm border border-gray-100">
                  <div className="flex items-center mb-2">
                    {comment.creatorProfileImageUrl ? (
                      <img
                        src={comment.creatorProfileImageUrl}
                        alt="Foto do Comentarista"
                        className="w-8 h-8 rounded-full object-cover mr-2 border border-gray-300 cursor-pointer"
                        onClick={() => openPhotoModal(comment.creatorProfileImageUrl)}
                      />
                    ) : (
                      <div className="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center text-gray-500 text-xs mr-2">
                        PF
                      </div>
                    )}
                    <p className="font-semibold text-gray-700">{comment.creatorName || 'Usuário Desconhecido'}</p>
                    <span className="text-xs text-gray-500 ml-auto">{comment.createdAt}</span>
                  </div>
                  {editingCommentId === comment.id ? (
                    <div className="flex flex-col space-y-2">
                      <textarea
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 resize-none"
                        value={editingCommentText}
                        onChange={(e) => setEditingCommentText(e.target.value)}
                        rows="2"
                      />
                      <div className="flex justify-end space-x-2">
                        <button
                          onClick={() => setEditingCommentId(null)}
                          className="px-3 py-1 bg-gray-300 text-gray-800 rounded-lg text-xs hover:bg-gray-400 transition duration-200"
                        >
                          Cancelar
                        </button>
                        <button
                          onClick={() => handleSaveEditedComment(comment.id)}
                          className="px-3 py-1 bg-green-500 text-white rounded-lg text-xs hover:bg-green-600 transition duration-200 disabled:opacity-50"
                          disabled={postingComment}
                        >
                          {postingComment ? 'Salvando...' : 'Salvar'}
                        </button>
                      </div>
                    </div>
                  ) : (
                    <p className="text-gray-700 text-sm">
                      {comment.text}
                    </p>
                  )}
                  {comment.creatorId === userId && editingCommentId !== comment.id && (
                    <div className="flex justify-end space-x-2 mt-2">
                      <button
                        onClick={() => handleEditComment(comment)}
                        className="px-2 py-1 bg-blue-500 text-white rounded-lg text-xs hover:bg-blue-600 transition duration-200"
                      >
                        Editar
                      </button>
                      <button
                        onClick={() => confirmDeleteComment(comment)}
                        className="px-2 py-1 bg-red-500 text-white rounded-lg text-xs hover:bg-red-600 transition duration-200"
                      >
                        Apagar
                      </button>
                    </div>
                  )}
                </div>
              ))
            )}
            <div ref={commentsEndRef} />
          </div>

          <div className="mt-4 flex space-x-2">
            <textarea
              className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 resize-none"
              placeholder="Adicionar um comentário..."
              rows="2"
              value={commentText}
              onChange={(e) => setCommentText(e.target.value)}
              disabled={postingComment}
            ></textarea>
            <button
              onClick={handlePostComment}
              className="bg-indigo-600 text-white px-4 py-2 rounded-lg font-semibold hover:bg-indigo-700 transition duration-300 disabled:opacity-50"
              disabled={postingComment}
            >
              {postingComment ? 'Postando...' : 'Postar'}
            </button>
          </div>
        </div>
      </div>
      <PhotoModal imageUrl={selectedPhoto} onClose={() => setSelectedPhoto(null)} />
    </div>
  );
};

const GlobalChatScreen = ({ showMessage }) => {
  const { db, userId, projectId } = useFirebase();
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState([]);
  const [sendingMessage, setSendingMessage] = useState(false);
  const [chatLoading, setChatLoading] = useState(true);
  const [editingMessageId, setEditingMessageId] = useState(null);
  const [editingMessageText, setEditingMessageText] = useState('');
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [messageToDelete, setMessageToDelete] = useState(null);
  const [selectedPhoto, setSelectedPhoto] = useState(null);

  const messagesEndRef = useRef(null);

  useEffect(() => {
    if (!db || !projectId) {
      setChatLoading(false);
      return;
    }

    const globalChatCollectionRef = collection(db, `artifacts/${projectId}/public/data/global_chat_messages`);
    const q = query(globalChatCollectionRef, orderBy('createdAt'));

    const unsubscribe = onSnapshot(q, async (snapshot) => {
      const fetchedMessages = await Promise.all(snapshot.docs.map(async docSnapshot => {
        const msg = { id: docSnapshot.id, ...docSnapshot.data() };
        let senderName = 'Usuário Desconhecido';
        let senderProfileImageUrl = '';

        if (msg.senderId) {
          try {
            const profileDocRef = doc(db, `artifacts/${projectId}/users/${msg.senderId}/profiles`, 'myProfile');
            const profileDocSnap = await getDoc(profileDocRef);
            if (profileDocSnap.exists()) {
              const profileData = profileDocSnap.data();
              senderName = profileData.name || senderName;
              senderProfileImageUrl = profileData.profileImageUrl || '';
            } else {
              console.warn(`Documento de perfil 'myProfile' não encontrado para o UID: ${msg.senderId}`);
            }
          } catch (profileError) {
            console.error(`Erro ao buscar perfil do remetente ${msg.senderId}:`, profileError);
          }
        } else {
          console.warn('Mensagem sem senderId definido:', msg);
        }
        return {
          ...msg,
          senderName,
          senderProfileImageUrl,
          createdAt: msg.createdAt?.toDate().toLocaleString('pt-BR') || 'agora'
        };
      }));
      setMessages(fetchedMessages);
      setChatLoading(false);
    }, (error) => {
      console.error("Erro ao buscar mensagens do chat global:", error);
      showMessage("Erro ao carregar mensagens do chat global.", "error");
      setChatLoading(false);
    });

    return () => unsubscribe();
  }, [db, projectId, showMessage]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const handleSendMessage = async () => {
    if (message.trim() === '' || !db || !userId || !projectId) {
      return;
    }

    setSendingMessage(true);
    try {
      await addDoc(collection(db, `artifacts/${projectId}/public/data/global_chat_messages`), {
        text: message,
        senderId: userId,
        createdAt: serverTimestamp(),
      });
      setMessage('');
    } catch (error) {
      console.error('Erro ao enviar mensagem:', error);
      showMessage('Erro ao enviar mensagem.', 'error');
    } finally {
      setSendingMessage(false);
    }
  };

  const handleEditMessage = (msg) => {
    setEditingMessageId(msg.id);
    setEditingMessageText(msg.text);
  };

  const handleSaveEditedMessage = async (messageId) => {
    if (editingMessageText.trim() === '' || !db || !projectId) {
      return;
    }
    setSendingMessage(true);
    try {
      const messageRef = doc(db, `artifacts/${projectId}/public/data/global_chat_messages`, messageId);
      await updateDoc(messageRef, {
        text: editingMessageText,
        updatedAt: serverTimestamp(),
      });
      setEditingMessageId(null);
      setEditingMessageText('');
      showMessage('Mensagem atualizada!', 'success');
    } catch (error) {
      console.error('Erro ao atualizar mensagem:', error);
      showMessage('Erro ao atualizar mensagem.', 'error');
    } finally {
      setSendingMessage(false);
    }
  };

  const confirmDeleteMessage = (msg) => {
    setMessageToDelete(msg);
    setShowDeleteConfirm(true);
  };

  const executeDeleteMessage = async () => {
    if (!db || !projectId || !messageToDelete) {
      showMessage('Erro: Não foi possível apagar a mensagem.', 'error');
      return;
    }
    try {
      await deleteDoc(doc(db, `artifacts/${projectId}/public/data/global_chat_messages`, messageToDelete.id));
      showMessage('Mensagem apagada!', 'success');
      setMessageToDelete(null);
      setShowDeleteConfirm(false);
    } catch (error) {
      console.error('Erro ao apagar mensagem:', error);
      showMessage('Erro ao apagar mensagem.', 'error');
    }
  };

  const openPhotoModal = (imageUrl) => {
    setSelectedPhoto(imageUrl);
  };

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col p-4 pb-20 overflow-y-auto items-center">
      <div className="bg-white p-6 rounded-xl shadow-lg w-full max-w-2xl flex-1 mb-4 flex flex-col transform transition-all duration-300 ease-in-out scale-95 hover:scale-100">
        <h2 className="text-2xl font-bold text-gray-800 mb-4 text-center">Chat Global</h2>
        <div className="flex-1 overflow-y-auto mb-4 p-2 border rounded-lg bg-gray-50">
          {chatLoading ? (
            <p className="text-center text-gray-500 mt-4">Carregando mensagens...</p>
          ) : messages.length === 0 ? (
            <p className="text-center text-gray-500 mt-4">Nenhuma mensagem ainda. Diga olá para todos!</p>
          ) : (
            messages.map((msg) => (
              <div key={msg.id} className={`mb-2 ${msg.senderId === userId ? 'text-right' : 'text-left'}`}>
                <div className={`inline-block p-2 rounded-lg ${msg.senderId === userId ? 'bg-indigo-500 text-white' : 'bg-gray-300 text-gray-800'}`}>
                  <div className={`flex items-center mb-1 ${msg.senderId === userId ? 'flex-row-reverse' : 'flex-row'}`}>
                    {msg.senderProfileImageUrl ? (
                      <img
                        src={msg.senderProfileImageUrl}
                        alt="Foto do Remetente"
                        className={`w-6 h-6 rounded-full object-cover border border-gray-400 cursor-pointer ${msg.senderId === userId ? 'ml-2' : 'mr-2'}`}
                        onClick={() => openPhotoModal(msg.senderProfileImageUrl)}
                        onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/24x24/cccccc/333333?text=PF"; }}
                      />
                    ) : (
                      <div className={`w-6 h-6 rounded-full bg-gray-400 flex items-center justify-center text-white text-xs ${msg.senderId === userId ? 'ml-2' : 'mr-2'}`}>
                        PF
                      </div>
                    )}
                    <span className="font-semibold text-sm">{msg.senderName || 'Usuário Desconhecido'}</span>
                  </div>
                  {editingMessageId === msg.id ? (
                    <div className="flex flex-col space-y-2 mt-2">
                      <textarea
                        className="w-full px-2 py-1 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 resize-none text-gray-800"
                        value={editingMessageText}
                        onChange={(e) => setEditingMessageText(e.target.value)}
                        rows="2"
                      />
                      <div className="flex justify-end space-x-2">
                        <button
                          onClick={() => setEditingMessageId(null)}
                          className="px-2 py-1 bg-gray-500 text-white rounded-lg text-xs hover:bg-gray-600 transition duration-200"
                        >
                          Cancelar
                        </button>
                        <button
                          onClick={() => handleSaveEditedMessage(msg.id)}
                          className="px-2 py-1 bg-green-500 text-white rounded-lg text-xs hover:bg-green-600 transition duration-200 disabled:opacity-50"
                          disabled={sendingMessage}
                        >
                          {sendingMessage ? 'Salvando...' : 'Salvar'}
                        </button>
                      </div>
                    </div>
                  ) : (
                    <p className="text-sm">{msg.text}</p>
                  )}
                  {msg.senderId === userId && editingMessageId !== msg.id && (
                    <div className="flex justify-end space-x-2 mt-2">
                      <button
                        onClick={() => handleEditMessage(msg)}
                        className="px-2 py-1 bg-blue-500 text-white rounded-lg text-xs hover:bg-blue-600 transition duration-200"
                      >
                        Editar
                      </button>
                      <button
                        onClick={() => confirmDeleteMessage(msg)}
                        className="px-2 py-1 bg-red-500 text-white rounded-lg text-xs hover:bg-red-600 transition duration-200"
                      >
                        Apagar
                      </button>
                    </div>
                  )}
                </div>
                <div className="text-xs text-gray-500 mt-1">{msg.createdAt}</div>
              </div>
            ))
          )}
          <div ref={messagesEndRef} />
        </div>
        <div className="flex">
          <input
            type="text"
            className="flex-1 px-4 py-2 border border-gray-300 rounded-l-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
            placeholder="Digite sua mensagem..."
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
            disabled={sendingMessage}
          />
          <button
            onClick={handleSendMessage}
            className="bg-indigo-600 text-white px-4 py-2 rounded-r-lg font-semibold hover:bg-indigo-700 transition duration-300 disabled:opacity-50"
            disabled={sendingMessage}
          >
            {sendingMessage ? 'Enviando...' : 'Enviar'}
          </button>
        </div>
      </div>
      {showDeleteConfirm && (
        <ConfirmationModal
          message={`Tem certeza que deseja apagar esta mensagem?`}
          onConfirm={executeDeleteMessage}
          onCancel={() => setShowDeleteConfirm(false)}
        />
      )}
      <PhotoModal imageUrl={selectedPhoto} onClose={() => setSelectedPhoto(null)} />
    </div>
  );
};

const MainAppContent = () => {
  const { userId, auth } = useFirebase();
  const [currentScreen, setCurrentScreen] = useState('auth');
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [message, setMessage] = useState('');
  const [messageType, setMessageType] = useState('');

  useEffect(() => {
    if (userId && currentScreen === 'auth') {
      setCurrentScreen('home');
    } else if (userId === null && currentScreen !== 'auth') {
      setCurrentScreen('auth');
    }
  }, [userId, currentScreen]);

  const showMessage = (msg, type) => {
    setMessage(msg);
    setMessageType(type);
    setTimeout(() => {
      setMessage('');
      setMessageType('');
    }, 3000);
  };

  const handleLogout = async () => {
    try {
      await signOut(auth);
      showMessage('Deslogado com sucesso!', 'success');
      setCurrentScreen('auth');
    } catch (error) {
      console.error('Erro ao deslogar:', error);
      showMessage('Erro ao deslogar.', 'error');
    }
  };

  const renderScreen = () => {
    switch (currentScreen) {
      case 'auth':
        return <AuthScreen setCurrentScreen={setCurrentScreen} showMessage={showMessage} />;
      case 'home':
        return <EventListScreen setCurrentScreen={setCurrentScreen} setSelectedEvent={setSelectedEvent} showMessage={showMessage} />;
      case 'profile':
        return <ProfileScreen setCurrentScreen={setCurrentScreen} showMessage={showMessage} />;
      case 'createEvent':
        return <CreateEventScreen setCurrentScreen={setCurrentScreen} showMessage={showMessage} />;
      case 'eventDetail':
        return <EventDetailScreen setCurrentScreen={setCurrentScreen} selectedEvent={selectedEvent} showMessage={showMessage} />;
      case 'globalChat':
        return <GlobalChatScreen showMessage={showMessage} />;
      case 'editEvent':
        return <EditEventScreen setCurrentScreen={setCurrentScreen} showMessage={showMessage} eventToEdit={selectedEvent} />;
      default:
        return <AuthScreen setCurrentScreen={setCurrentScreen} showMessage={showMessage} />;
    }
  };

  return (
    <div className="font-sans antialiased text-gray-900 bg-gray-50 min-h-screen">
      {renderScreen()}
      {userId && currentScreen !== 'auth' && (
        <div className="fixed bottom-0 left-0 right-0 bg-white shadow-lg p-4 flex justify-around border-t border-gray-200 z-40">
          <button
            onClick={() => setCurrentScreen('home')}
            className={`flex flex-col items-center text-sm font-medium ${currentScreen === 'home' ? 'text-indigo-600' : 'text-gray-500'} hover:text-indigo-600 transition duration-200`}
          >
            <svg className="w-6 h-6 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m0 0l7 7m-10-7v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001 1h3v-3m0 0h6v3m0 0h3a1 1 0 001-1v-4m-14 0h-3a1 1 0 01-1-1V7a1 1 0 011-1h3m7 0h3a1 1 0 011 1v4a1 1 0 01-1 1h-3"></path></svg>
            <span>Eventos</span>
          </button>
          <button
            onClick={() => setCurrentScreen('profile')}
            className={`flex flex-col items-center text-sm font-medium ${currentScreen === 'profile' ? 'text-indigo-600' : 'text-gray-500'} hover:text-indigo-600 transition duration-200`}
          >
            <svg className="w-6 h-6 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path></svg>
            <span>Perfil</span>
          </button>
          <button
            onClick={() => setCurrentScreen('globalChat')}
            className={`flex flex-col items-center text-sm font-medium ${currentScreen === 'globalChat' ? 'text-indigo-600' : 'text-gray-500'} hover:text-indigo-600 transition duration-200`}
          >
            <svg className="w-6 h-6 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path></svg>
            <span>Chat Global</span>
          </button>
          <button
            onClick={handleLogout}
            className="flex flex-col items-center text-sm font-medium text-gray-500 hover:text-red-500 transition duration-200"
          >
            <svg className="w-6 h-6 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path></svg>
            <span>Sair</span>
          </button>
        </div>
      )}
      <FloatingMessage message={message} type={messageType} onClose={() => setMessage('')} />
    </div>
  );
};

const App = () => {
  return (
    <FirebaseProvider>
      <MainAppContent />
    </FirebaseProvider>
  );
};

export default App;
